module.exports = {
	MODULES_PER_SECOND: 'MPS [Last 1s]',
	FILES_PER_SECOND: 'FPS [Last 1s]',
	FILE_TAG: 'Files Checked',
	REGEX_IN_TAG: 'Files with RE',
	MODULES_TAG: 'Modules Checked',
	MODULES_WITH_RE_TAG: 'Modules with RE',
	ACORN_ERROR_COUNT: 'Parsing Errors',
	READ_ERRORS: 'File read errors',
	MODULE_READ_ERRORS: 'Module read errors',
	PARTIAL_MODULE_READ_ERRORS: 'Partial module read errors',
	REGEX_TAG: 'Regular Expressions',
	REGEX_WITH_CAPTURE: 'Capture Groups',
	REGEX_WITH_BREF: 'Backreferences',
	REGEX_WITH_NORE_CAP: 'Group (Non Captured)',
	REGEX_FIXED_LOOP: 'Fixed Loop',
	REGEX_MIN_LOOPS: 'Loop (Min,)',
	REGEX_BETWEEN_LOOPS: 'Loop (Min, Max)',
	REGEX_FIXED_LOOP_LAZY: 'Fixed Loop (Lazy)',
	REGEX_MIN_LOOPS_LAZY: 'Loop (Min,) (Lazy)',
	REGEX_BETWEEN_LOOPS_LAZY: 'Loop (Min, Max) (Lazy)',
	REGEX_KPLUS: 'Klene+',
	REGEX_KSTAR:'Klene*',
	REGEX_KPLUS_LAZY: 'Lazy Klene+ (+?)',
	REGEX_KSTAR_LAZY:'Lazy Klene* (*?)',
	ANY_CHAR_WILDCARD: 'Any character wildcard (.)',
	LOGICAL_OR: 'Logical or (|)',
	LOOPED_CAPTURE: 'Looped capture groups',
	BACKREFERENCE_INSIDE_LOOP: 'Looped Backreferences',
	MULTILINE_TAG: 'Multiline Flag',
	GLOBAL_TAG: 'Global Flag',
	UNICODE_TAG: 'Unicode Flag',
	STICKY_TAG: 'Sticky Flag',
	CASE_TAG: 'Case Insensitive Flag',
	NON_STANDARD_FLAG: 'Unknown Flag (Non-standard)',
	MODULES_WITH_BREF: 'Modules with Backreferences',
	MODULES_WITH_CAPTURES: 'Modules with captures',
	MODULES_WITH_LOOPED_BREF: 'Modules with looped backreferences',
	EMPTY_MODULES: 'Modules with no JavaScript',
	COMPLETELY_EMPTY_MODULE: 'Modules with no files',
	CUSTOM_RANGE: 'Custome Range ([x-y])',
	CUSTOM_CHARACTER_CLASS: 'Custom Character Class ([.*])',
	SUGAR_CLASSES: 'Sugar Classes (\\n, \\d etc)',
	UNICODE_CHARS: 'Unicode Sequence (\\uXXXX)',
	ONE_OR_NONE: 'One or none (?)',
	INDEX_OF: 'indexOf Usage (Approx - By Name)',
	MATCH: 'match Usage (Approx - By Name)',
	EXEC: 'exec Usage (Approx - By Name)',
	REPLACE: 'replace Usage (Approx - By Name)',
	TEST_EXACT: 'test Usage (Exact - By literal)',
	EXEC_EXACT: 'exec Usage (Exact - by Literal)',
	REPLACE_REGEX_LITERAL: 'replace (Regex Literal - Exact)',
	MATCH_REGEX_LITERAL: 'match (Regex Literal - Exact)',
	TEST: 'test Usage (Approx - By Name)',
	SUBSTRING: 'Substring Usage (Approx - By Name)',
	MATCH_AND_INDEX: 'Match and IndexOf',
	REPLACE_AND_INDEX: 'Replace and IndexOf',
	EXEC_AND_INDEX: 'Exec and IndexOf',
	MODULE_TIMEOUTS: 'Module Timeouts',
	WORD_BOUNDRY: 'Word Boundry (\\b)',
	ASSERT: 'Assertion (= Lookahead)',
	ASSERT_NOT: 'Negative Assertion (!= lookahead)',
	SEARCH: 'Search (Approx - By name)',
	SPLIT: 'Split (Approx - By Name)',
	SEARCH_REGEX_LITERAL: 'Search (Exact - By type)',
	SPLIT_REGEX_LITERAL: 'Split (Exact - By type)'
};